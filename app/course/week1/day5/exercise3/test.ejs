<script type="text/javascript" src="<%= view.solution %>.js"></script>
<script type="text/javascript">
const runTest = function(){
    var schema = []
    var DB
    window.schema = []
    describe( 'Schema should:',  ()=>{
        beforeEach(()=>{
            DB = window.DB = []
        })
        it('only at the keys of the object that are defined in the schema', () => {
            window.schema = {id: "number", name: "string", age: "number"}
            model("add", {id: 1, name: "pedro", age: 32, address: "Rue de la Science 23, Brussels"})
            expect( DB[0] ).toEqual({id: 1, name: "pedro", age: 32})
        })

        it('show be able to add more than one record', () => {
            window.schema = {id: "number", country: "string", address: "string"}
            model("add", {id: 2, country: "pedro Land", age: 32, address: "Rue de la Science 23, Brussels"})
            model("add", {id: 1, country: "pedro Land", age: 32, address: "Rue de la Science 23, Brussels"})
            expect( DB[0] ).toEqual({id: 2, country: "pedro Land", address: "Rue de la Science 23, Brussels"})
            expect( DB[1] ).toEqual({id: 1, country: "pedro Land", address: "Rue de la Science 23, Brussels"})
        })

        it('it should not add anything if the schema is empty', () => {
            window.schema = {}
            model("add", {a: 1, b: 2, c: 2, d: 3})
            expect( DB[0] ).toEqual({})
        })

        it('it should not add key that are not in the Schema', () => {
            window.schema = {Location: "string", tel: "number", "reference Name": "string"}
            model("add", {Location: "pedro city", position: "developer", pay: "alot"})
            expect( DB[0] ).toEqual({Location: "pedro city"})
        })

        it('it should not add a property with the wrong value type', () => {
            window.schema = {Location: "boolean", tel: "number", "reference Name": "string", available: "string"}
            model("add", {Location: "pedro city", position: "developer", pay: "alot", available: "yes"})

            window.schema = {Location: "string", tel: "number", "reference Name": "string", available: "boolean"}
            model("add", {Location: "pedro city", position: "developer", pay: "alot", available: false})


            expect( DB[0] ).toEqual({available: "yes"})
            expect( DB[1] ).toEqual({Location: "pedro city", available: false})

        })


    })
}

runTest()

</script>

<div class="jasmine_html-reporter"></div>