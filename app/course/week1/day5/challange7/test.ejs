<script type="text/javascript" src="<%= view.solution %>.js"></script>
<script type="text/javascript">
const runTest = function(){
    var schema = []
    var DB
    window.schema = []
    describe( 'Schema should:',  ()=>{
        beforeEach(()=>{
            DB = window.DB = []
        })
        it('only at the keys of the object that are defined in the schema', () => {
            window.schema = {id: {type: "number"}, name: {type: "string"}, age: {type: "number"}}
            model("add", {id: 1, name: "pedro", age: 32, address: "Rue de la Science 23, Brussels"})
            expect( DB[0] ).toEqual({id: 1, name: "pedro", age: 32})
        })

        it('show be able to add more than one record', () => {
            window.schema = {id: {type: "number"}, country: {type: "string"}, address: {type: "string"}}
            model("add", {id: 2, country: "pedro Land", age: 32, address: "Rue de la Science 23, Brussels"})
            model("add", {id: 1, country: "pedro Land", age: 32, address: "Rue de la Science 23, Brussels"})
            expect( DB[0] ).toEqual({id: 2, country: "pedro Land", address: "Rue de la Science 23, Brussels"})
            expect( DB[1] ).toEqual({id: 1, country: "pedro Land", address: "Rue de la Science 23, Brussels"})
        })

        it('it should not add anything if the schema is empty', () => {
            window.schema = {}
            model("add", {a: 1, b: 2, c: 2, d: 3})
            expect( DB[0] ).toEqual({})
        })

        it('it should not add key that are not in the Schema', () => {
            window.schema = {Location: {type: "string"}, tel: {type: "number"}, "reference Name": {type: "string"}}
            model("add", {Location: "pedro city", position: "developer", pay: "alot"})
            expect( DB[0] ).toEqual({Location: "pedro city"})
        })

        it('it should not add a property with the wrong value type', () => {
            window.schema = {Location: {type: "boolean"}, tel: {type: "number"}, "reference Name": {type: "string"}, available: {type: "string"}}
            model("add", {Location: "pedro city", position: "developer", pay: "alot", available: "yes"})

            window.schema = {Location: {type: "string"}, tel: {type: "number"}, "reference Name": {type: "string"}, available: {type: "boolean"}}
            model("add", {Location: "pedro city", position: "developer", pay: "alot", available: false})


            expect( DB[0] ).toEqual({available: "yes"})
            expect( DB[1] ).toEqual({Location: "pedro city", available: false})

        })

        it('it should add a default when property missing ', () => {
            window.schema = {
                name: {type: "string", default: "NoBody"},
                age: {type: "number"},
                married: {type: "boolean", default: true}
            }

            model("add", {id: 1, name: "pedro", age: "32", address: "Rue de la Science 23, Brussels"})
            expect( DB[0] ).toEqual({name: "pedro", married: true})

            model("add", {age: "32"})
            expect( DB[1] ).toEqual({name: "NoBody", married: true})
        })

        it('it should not change the value of a valid property ', () => {
            window.schema = {
                height: {type: "number", default: 23},
                "number of arms": {type: "number", default: 10}
            }

            model("add", {height: 1, "number of arms": 23})
            expect( DB[0] ).toEqual({height: 1, "number of arms": 23})

            model("add", {height: 3, "number of arms": 3})
            expect( DB[1] ).toEqual({height: 3, "number of arms": 3})
        })

        it('it should set a default property if the type is not matching ', () => {
            window.schema = {
                height: {type: "string", default: "23"},
                "number of arms": {type: "number", default: 10}
            }

            model("add", {height: 1, "number of arms": 23})
            expect( DB[0] ).toEqual({height: "23", "number of arms": 23})

            model("add", {height: 3, "number of arms": 3})
            expect( DB[1] ).toEqual({height: "23", "number of arms": 3})
        })

        it('it accept a condition function ', () => {
            window.schema = {
                height: {condition: function(obj){ return obj.height === 0}},
                "number of arms": {type: "number", default: 10}
            }

            model("add", {height: 1, "number of arms": 23})
            expect( DB[0] ).toEqual({"number of arms": 23})

            model("add", {height: 0})
            expect( DB[1] ).toEqual({height: 0, "number of arms": 10})
        })

        it('it should update one record if found', () => {
            window.schema = {
                "number of arms": {type: "number", default: 10},
                "name": {type: "string", default: "pedro"}
            }

            model("add",    {height: 1, "number of arms": 23})
            model("update", {"number of arms": 23} , {name: "Pedro Antonio Favuzzi"})
            expect( DB[0] ).toEqual({"number of arms": 23, name: "Pedro Antonio Favuzzi"})

            model("add",    {height: 1, "number of arms": 1})
            model("update", {"name": "pedro"} , {name: "Juan David"})
            expect( DB[1] ).toEqual({"number of arms": 1, name: "Juan David"})

        })

        it('it should update nothing if nothing is found', () => {
           window.schema = {
                "number of arms": {type: "number", default: 10},
                "name": {type: "string", default: "pedro"}
            }

            model("add",    {height: 1, "number of arms": 23})
            model("update", {"name": "asdf" } , {name: "Pedro Antonio Favuzzi"})
            expect( DB[0] ).toEqual({"number of arms": 23, name: "pedro"})

            model("add",    {height: 1, "number of arms": 1})
            model("update", {"number of arms": 100} , {name: "Juan David"})
            expect( DB[1] ).toEqual({"number of arms": 1, name: "pedro"})
        })


        it('it should update more records if found', () => {
           window.schema = {
                "number of arms": {type: "number", default: 10},
                "name": {type: "string", default: "pedro"}
            }

            model("add",    {height: 1, "number of arms": 23})
            model("add",    {height: 1, "number of arms": 1})

            model("update", {"name": "pedro" } , {name: "Pedro Antonio Favuzzi"})
            expect( DB[0] ).toEqual({"number of arms": 23, name: "Pedro Antonio Favuzzi"})
            expect( DB[1] ).toEqual({"number of arms": 1, name: "Pedro Antonio Favuzzi"})
        })

        it('it should update conditionally', () => {
           window.schema = {
                height: {condition: function(obj){return obj.height > 10 && obj.height < 20}},
                "number of arms": {type: "number", default: 10},
                "name": {type: "string", default: "pedro"}
            }

            model("add",    {height: 15, "number of arms": 23})
            model("add",    {height: 19, "number of arms": 1})

            model("update", {"number of arms": 23 } , {height: 16})
            expect( DB[0] ).toEqual({"number of arms": 23, height: 16 , name: "pedro"})

            model("update", {"number of arms": 1 } , {height: 20})
            expect( DB[1] ).toEqual({"number of arms": 1, height: 19 , name: "pedro"})

            model("update", {"name": "pedro" } , {height: 19})
            expect( DB[0] ).toEqual({"number of arms": 23, height: 19 , name: "pedro"})
            expect( DB[1] ).toEqual({"number of arms": 1, height: 19 , name: "pedro"})

            model("update", {"name": "pedro" } , {height: 25})
            expect( DB[0] ).toEqual({"number of arms": 23, height: 19 , name: "pedro"})
            expect( DB[1] ).toEqual({"number of arms": 1, height: 19 , name: "pedro"})
        })


        it('it should delete a record if found', () => {
           window.schema = {
                "number of arms": {type: "number", default: 10},
                "name": {type: "string", default: "pedro"}
            }

            model("add",    {height: 1, "number of arms": 23})
            model("add",    {height: 1, "number of arms": 1})
            model("add",    {height: 1, "number of arms": 2})
            model("add",    {height: 1, "number of arms": 3})
            model("add",    {height: 1, "number of arms": 4})
            model("add",    {height: 1, "number of arms": 5})
            model("add",    {height: 1, "number of arms": 1})

            model("delete", {"number of arms": 23 })
            model("delete", {"number of arms": 5 })
            model("delete", {"number of arms": 4 })

            expect( DB.length ).toEqual(4)

            model("add",    {height: 1, "number of arms": 5})
            model("add",    {height: 1, "number of arms": 1})
            model("delete", {"number of arms": 5 } )

            expect( DB.length ).toEqual(5)

            model("delete", {"height": 1 })
            expect( DB.length ).toEqual(5)

         })

        it('it should delete nothing if nothing is found', () => {
            model("add",    {height: 1, "number of arms": 23})
            model("add",    {height: 1, "number of arms": 1})
            model("add",    {height: 1, "number of arms": 2})
            model("add",    {height: 1, "number of arms": 3})
            model("add",    {height: 1, "number of arms": 4})
            model("add",    {height: 1, "number of arms": 5})
            model("add",    {height: 1, "number of arms": 1})

            model("delete", {"number of arms": 1000 })
            expect( DB.length ).toEqual(7)
        })


        it('it should delete multiple records if found', () => {
            model("add",    {height: 1, "number of arms": 23})
            model("add",    {height: 1, "number of arms": 1})
            model("add",    {height: 1, "number of arms": 2})
            model("add",    {height: 1, "number of arms": 3})
            model("add",    {height: 1, "number of arms": 4})
            model("add",    {height: 1, "number of arms": 5})
            model("add",    {height: 1, "number of arms": 1})

            model("delete", {"number of arms": 1 })
            expect( DB.length ).toEqual(5)
        })


        it('it should delete delete only if all the search properties match', () => {
           window.schema = {
                height: {condition: function(obj){return obj.height > 10 && obj.height < 20}},
                "number of arms": {type: "number", default: 10},
                "name": {type: "string", default: "pedro"}
            }
            model("add",    {height: 1, "number of arms": 23})
            model("add",    {height: 1, "number of arms": 1})
            model("add",    {height: 1, "number of arms": 2})
            model("add",    {height: 1, "number of arms": 3})
            model("add",    {height: 1, "number of arms": 4})
            model("add",    {height: 12, "number of arms": 5})
            model("add",    {height: 15, "number of arms": 1})

            model("delete", {height: 15, "number of arms": 1})
            expect( DB.length ).toEqual(6)
            expect( DB[5] ).toEqual({height: 12, "number of arms": 5, name: "pedro"})
        })


    })
}


runTest()

</script>

<div class="jasmine_html-reporter"></div>