<script type="text/javascript">
    const runTest = function(){
        describe( 'translation App should:',  ()=>{
            var formFoundMessage = function(form, method, path, sentence){
                var newSentece =  path.replace(":sentence", sentence)
                var method = method.toLowerCase()
                if(form === "expected"){
                    return `Form found with action '${newSentece}' and method '${method}'`
                } else if(form.get(0)){
                    var formAction = form.attr('action')
                    var formMethod = form.attr('method').toLowerCase()
                    return `Form found with action \'${formAction}\' and method \'${formMethod}\'`
                } else {
                    return "Form not found!!!"
                }
            }
            var sentences = {
                carrot: {IT: "carota", ES: "zanahoria", FR: "carotte" }
                //,airplane: {IS: "flugvel", DE: "Flugzeug", NL: "vliegtuig" }
                //,knife: {NO: "kniv", PT: "faca", "NL": "mes"}
            }


            it(`have an index page with a form that allows us to create new sentences`, (done) => {
                axios.get("/proxy/").then(res => {
                    $(".jasmine-testground").append(res.data)
                    var addForm =$(".jasmine-testground").find("form")
                    var foundMessage = formFoundMessage(addForm, "POST", "/sentences")
                    var ExpectedMessage = formFoundMessage("expected", "POST", "/sentences")
                    expect(foundMessage).toEqual(ExpectedMessage)
                    done()
                })
            })

            Object.keys(sentences).map(function(sentence) {
                it(`redirect to home when a new sentence is created and show the new sentence`, (done) => {
                    axios.post("/proxy/sentences", {sentence: sentence}).then(res => {
                        axios.get("/proxy/").then(res => {
                            $(".jasmine-testground").empty().append(res.data)
                            var sentenceLI = $(".jasmine-testground").find(`[sentence=\"${sentence}\"]`)
                            expect(sentenceLI.is("li")).toEqual(true)
                            expect(sentenceLI.text().trim()).toEqual(sentence)

                            var deleteForm = sentenceLI.find(`[action='/sentences/${sentence}/delete']`)
                            var foundMessage = formFoundMessage(deleteForm, "POST", "/sentences/:sentence/delete", sentence)
                            var ExpectedMessage = formFoundMessage("expected", "POST", "/sentences/:sentence/delete", sentence)
                            expect(foundMessage).toEqual(ExpectedMessage)

                            var updateForm = sentenceLI.find(`[action='/sentences/${sentence}/update']`)
                            var foundMessage = formFoundMessage(updateForm, "GET", "/sentences/:sentence/update", sentence)
                            var ExpectedMessage = formFoundMessage("expected", "GET", "/sentences/:sentence/update", sentence)
                            expect(foundMessage).toEqual(ExpectedMessage)

                            var translateForm = sentenceLI.find(`[action='/sentences/${sentence}/translate']`)
                            var foundMessage = formFoundMessage(translateForm, "GET", "/sentences/:sentence/translate", sentence)
                            var ExpectedMessage = formFoundMessage("expected", "GET", "/sentences/:sentence/translate", sentence)
                            expect(foundMessage).toEqual(ExpectedMessage)
                            done()
                        })
                    })
                })


                it(`have a page to update a translation`, (done) => {
                    axios.get(`/proxy/sentences/${sentence}/update`).then(res => {
                        $(".jasmine-testground").empty().append(res.data)

                        var updateForm = $(".jasmine-testground").find(`[action='/sentences/${sentence}/update']`)
                        var foundMessage = formFoundMessage(updateForm, "POST", "/sentences/:sentence/update", sentence)
                        var ExpectedMessage = formFoundMessage("expected", "POST", "/sentences/:sentence/update", sentence)
                        expect(foundMessage).toEqual(ExpectedMessage)

                        done()
                    })
                })

                it(`shold a page to delete a translation`, (done) => {
                    axios.get(`/proxy/sentences/${sentence}/translate`).then(res => {
                        $(".jasmine-testground").empty().append(res.data)

                        var translateForm = $(".jasmine-testground").find(`[action='/sentences/${sentence}/translate']`)
                        var foundMessage = formFoundMessage(translateForm, "POST", "/sentences/:sentence/translate", sentence)
                        var ExpectedMessage = formFoundMessage("expected", "POST", "/sentences/:sentence/translate", sentence)
                        expect(foundMessage).toEqual(ExpectedMessage)

                        done()
                    })
                })

                Object.keys(sentences[sentence]).map(function(lang) {
                    var tranObje = sentences[sentence]
                    it(`redirect to home when a new translation (${sentence[lang]}, ${lang} ) is added and show the new translation`, (done) => {
                        axios.post(`/proxy/sentences/${sentence}/translate`, {translation: tranObje[lang], lang:lang }).then(res => {
                            axios.get("/proxy/").then(res => {
                                $(".jasmine-testground").empty().append(res.data)
                                var translationLI = $(".jasmine-testground").find(`[sentence=\"${sentence}\"]`).find(`[lang="${lang}"][translation="${tranObje[lang]}"]`)
                                expect("Is li: " + translationLI.is("li")).toEqual("Is li: true")
                                expect("li text is => " + translationLI.text().trim()).toEqual("li text is => " + lang + " : " + tranObje[lang])

                                var deleteForm = translationLI.find(`[action='/sentences/${sentence}/delete/${lang}']`)
                                var foundMessage = formFoundMessage(deleteForm, "POST", `/sentences/:sentence/delete/${lang}`, sentence)
                                var ExpectedMessage = formFoundMessage("expected", "POST", `/sentences/:sentence/delete/${lang}`, sentence)
                                expect(foundMessage).toEqual(ExpectedMessage)

                                var updateForm = translationLI.find(`[action='/sentences/${sentence}/update/${lang}']`)
                                var foundMessage = formFoundMessage(updateForm, "GET", `/sentences/:sentence/update/${lang}`, sentence)
                                var ExpectedMessage = formFoundMessage("expected", "GET", `/sentences/:sentence/update/${lang}`, sentence)
                                expect(foundMessage).toEqual(ExpectedMessage)

                                done()
                            })
                        })

                    })

                    it(`redirect to home when a translation (${sentence[lang]}, ${lang} ) is updated with !!!`, (done) => {
                        axios.post(`/proxy/sentences/${sentence}/update/${lang}`, {translation: tranObje[lang]+"!!!", lang:lang }).then(res => {
                            axios.get("/proxy/").then(res => {
                                $(".jasmine-testground").empty().append(res.data)
                                var translationLI = $(".jasmine-testground").find(`[sentence=\"${sentence}\"]`).find(`[lang="${lang}"][translation="${tranObje[lang]}!!!"]`)
                                expect("li was found: " + translationLI.is("li")).toEqual("li was found: true")
                                expect("li text is => " + translationLI.text().trim()).toEqual("li text is => " + lang + " : " + tranObje[lang] + "!!!")

                                var deleteForm = translationLI.find(`[action='/sentences/${sentence}/delete/${lang}']`)
                                var foundMessage = formFoundMessage(deleteForm, "POST", `/sentences/:sentence/delete/${lang}`, sentence)
                                var ExpectedMessage = formFoundMessage("expected", "POST", `/sentences/:sentence/delete/${lang}`, sentence)
                                expect(foundMessage).toEqual(ExpectedMessage)

                                var updateForm = translationLI.find(`[action='/sentences/${sentence}/update/${lang}']`)
                                var foundMessage = formFoundMessage(updateForm, "GET", `/sentences/:sentence/update/${lang}`, sentence)
                                var ExpectedMessage = formFoundMessage("expected", "GET", `/sentences/:sentence/update/${lang}`, sentence)
                                expect(foundMessage).toEqual(ExpectedMessage)

                                done()
                            })
                        })

                    })


                    it(`redirect to home when a translation (${sentence[lang]}!!!, ${lang} ) is deleted`, (done) => {
                        axios.post(`/proxy/sentences/${sentence}/delete/${lang}`, {translation: tranObje[lang] + "!!!", lang:lang }).then(res => {
                            axios.get("/proxy/").then(res => {
                                $(".jasmine-testground").empty().append(res.data)
                                var translationLI = $(".jasmine-testground").find(`[sentence=\"${sentence}\"]`).find(`[lang="${lang}"][translation="${tranObje[lang]}!!!"]`)
                                expect("li deleted: " + translationLI.is("li")).toEqual("li deleted: false")

                                done()
                            })
                        })
                    })

                })


                it(`show redirect to home when a sentence is updated with !!!`, (done) => {

                    Object.keys(sentences[sentence]).map(function(lang) {
                        axios.post(`/proxy/sentences/${sentence}/translate`, {translation: sentences[sentence][lang], lang:lang }).then(res => {
                            expect(true).toEqual(true)
                            done()
                        })
                    })

                    axios.post(`/proxy/sentences/${sentence}/update`, {sentence: sentence + "!!!"}).then(res => {
                        axios.get("/proxy/").then(res => {
                            $(".jasmine-testground").empty().append(res.data)
                            
                            var sentenceLI = $(".jasmine-testground").find(`[sentence=\"${sentence}!!!\"]`).find("li")
                            expect("lis found = " + sentenceLI.length).toEqual("lis found = 3")
                            done()
                        })
                    })
                })


                it(`show redirect to home when a sentence is deleted`, (done) => {
                    axios.post(`/proxy/sentences/${sentence}/delete`).then(res => {
                        axios.get("/proxy/").then(res => {
                            $(".jasmine-testground").empty().append(res.data)
                            var sentenceLI = $(".jasmine-testground").find(`[sentence=\"${sentence}\"]`)
                            expect(sentenceLI.get(0)).toBeUndefined()
                            done()
                        })
                    })
                })
            })


        })
    }

    runTest()

</script>
<!-- style="display: none" -->
<div class="jasmine_html-reporter"></div>

<div class="jasmine-testground"  style="margin-top: 20px"></div>